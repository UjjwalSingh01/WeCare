generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Patient {
  id                        String    @id @default(uuid())
  fullName                  String
  email                     String    @unique
  phoneNumber               String    @unique
  dob                       DateTime
  gender                    Gender
  address                   String
  emergencyContactName      String?
  emergencyContactNumber    String?
  allergies                 String?
  currentMedications        String?
  medicalHistory            String?
  familyMedicalHistory      String?
  insuranceProvider         String?
  policyNumber              String?
  appointments              Appointment[]
}

model Doctor {
  id                  String           @id @default(uuid())
  fullName            String           @default("TBD")
  email               String           @unique
  licenseNumber       String?          @unique
  specialties         String[]
  hospitalAffiliations String[]
  officePhone         String           @default("+000-0000-0000")
  mobilePhone         String?
  availability        Boolean             @default(true)
  about               String
  latitude            Float?
  longitude           Float?
  address             String?
  rating              Float            @default(0.0)
  appointments        Appointment[]
  managedBy           HealthcareAdmin? @relation("ManagedDoctors", fields: [managedById], references: [id])
  managedById         String?
  verified            Boolean          @default(false)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
}

model Appointment {
  id              String             @id @default(uuid())
  doctor          Doctor             @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  doctorId        String     
  patient         Patient            @relation(fields: [patientId], references: [id], onDelete: Cascade)
  patientId       String     
  reason          String     
  clinicalNotes   String?    
  scheduledAt     DateTime            @default(now())
  duration        Int                 @default(30)
  status          AppointmentStatus   @default(PENDING)
  cancellationReason String?     
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
}

model HealthcareAdmin {
  id              String              @id @default(uuid())
  fullName        String
  email           String              @unique
  role            AdminRole           @default(FACILITY_ADMIN)
  pin             String
  permissions     AdminPermission
  managedDoctors  Doctor[]            @relation("ManagedDoctors")
  verifiedBy      HealthcareAdmin?    @relation("Verifiers", fields: [verifiedById], references: [id])
  verifiedById    String?
  verifications   HealthcareAdmin[]   @relation("Verifiers")
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  lastAccess      DateTime
}

model OTP {
  id           String     @id @default(uuid())
  email        String     @unique
  code         String     
  expiresAt    DateTime 
  attemptCount Int        @default(0)
  verified     Boolean    @default(false)
  createdAt    DateTime   @default(now())
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  NO_SHOW
}

enum AdminRole {
  SUPER_ADMIN
  FACILITY_ADMIN
}

enum AdminPermission {
  FULL_ACCESS
  READ_WRITE
}